{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["axios","get","then","response","data","note","post","id","put","Note","handleToggleImportance","label","important","className","content","style","margin","onClick","Notification","message","Footer","color","fontStyle","fontSize","App","useState","notes","setNotes","noteInput","setNoteInput","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","fakenote","noteService","length","notesToShow","filter","noteToUpdate","find","updatedNote","map","n","catch","error","setTimeout","key","onSubmit","event","date","Date","Math","random","preventDefault","addedNote","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8db10f0b.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseURL = '/notes'; //'https://calm-reaches-23102.herokuapp.com/notes'//'http://localhost:3001/notes';\n\nconst getAll = () => {\n    return axios\n        .get(baseURL)\n        .then(response => response.data);\n};\n\nconst create = (note) => {\n    return axios\n        .post(baseURL, note)\n        .then(response => response.data);\n};\n\nconst update = (note) => {\n    const id = note.id;\n    return axios\n        .put(`${baseURL}/${id}`, note)\n        .then(response => response.data);\n};\n\nexport default {\n    getAll,\n    create,\n    update\n};","import React from 'react';\n\nconst Note = ({note, handleToggleImportance}) => {\n    const label = note.important\n        ? 'make not important'\n        : 'make important';\n\n    return (\n        <li className='note'>\n            {note.content}\n            <button style={{margin: \"0 .5rem\"}} onClick={handleToggleImportance}>{label}</button>    \n        </li>\n    );\n}\n\nexport default Note;","import React from 'react';\n\nconst Notification = ({message}) => {\n    if (message === null) {\n        return null;\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    );\n};\n\nexport default Notification;\n","import React from 'react';\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    };\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n        </div>\n    );\n};\n\nexport default Footer;\n","import React, {useState, useEffect} from 'react';\nimport noteService from './services/notes';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\n\nconst App = () => {\n\n    const [notes, setNotes] = useState([]);\n    const [noteInput, setNoteInput] = useState('');\n    const [showAll, setShowAll] = useState(true);\n    const [errorMessage, setErrorMessage] = useState(null);\n\n    useEffect(() => {\n        console.log('effect');\n        const fakenote = {\n            \"content\": \"I'm fake\",\n            \"date\": \"2020-01-17T18:22:13.090Z\",\n            \"important\": false,\n            \"id\": 1000\n          }\n        noteService\n            .getAll()\n            .then(notes => {\n                console.log('promise fulfilled');\n                setNotes([...notes, fakenote]);\n            });\n    }, []);\n    console.log('render', notes.length, 'notes');\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important);\n    \n    const rows = () => notesToShow.map(note =>\n            <Note\n                key={note.id}\n                note={note}\n                handleToggleImportance={handleToggleImportance(note.id)}\n            />\n        );\n\n    const addNote = (event) => {\n        const note = {\n            content: noteInput,\n            date: new Date(),\n            important: Math.random() > 0.5\n        };\n\n        event.preventDefault();\n\n        noteService\n            .create(note)\n            .then(addedNote => {\n                setNotes([...notes, addedNote]);\n                setNoteInput('');\n            });\n        // setNotes([...notes, note]);\n        // setNoteInput('');\n        // console.log('button clicked', event.target);\n    };\n\n    const handleToggleImportance = (id) => () => {\n        const noteToUpdate = notes.find(note => note.id === id);\n\n        noteService\n            .update({...noteToUpdate, important: !noteToUpdate.important})\n            .then(updatedNote => {\n                setNotes(notes.map(n => n.id === id ? updatedNote : n));\n            })\n            .catch(error => {\n                // console.dir(error);\n                setErrorMessage(`Note '${noteToUpdate.content}' was already removed from server`);\n                setTimeout(() => setErrorMessage(null), 5000);\n                setNotes(notes.filter(n => n.id !== id));\n            });\n    };\n\n    const handleNoteChange = (event) => {\n        console.log(event.target.value);\n        setNoteInput(event.target.value);\n    };\n\n    return (\n        <div>\n            <h1>Notes</h1>\n\n            <Notification message={errorMessage} />\n\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {rows()}\n            </ul>\n            <form onSubmit={addNote}>\n                <input value={noteInput} onChange={handleNoteChange} />\n                <button type='submit'>save</button>\n            </form>\n            <Footer />\n        </div>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}